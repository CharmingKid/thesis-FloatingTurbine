/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2012                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
#include "../myVars" //Include global variables

scale   1;

cyl_a2 #calc "1.5*$cyl_a"; //outer cylinder radii
shiftx #calc "sqrt(1-pow($y0/$cyl_a,2))"; // X point cordinate in the circumference where y=-y0

vertices #codeStream
{
    codeInclude
    #{
        #include "pointField.H"
    #};

    code
    #{
        // sin(45), cos(45)
        const scalar sqrt05 = sqrt(0.5);
        pointField points
        ({
            /* 0*/ {$cyl_a*$shiftx, -$y0, $zmin},
            /* 1*/ {$cyl_a2*$shiftx, -$y0, $zmin},
            /* 2*/ {$domain_length, -$y0, $zmin},
            /* 3*/ {$domain_length, sqrt05*$cyl_a2, $zmin},
            /* 4*/ {sqrt05*$cyl_a2, sqrt05*$cyl_a2, $zmin},
            /* 5*/ {sqrt05*$cyl_a, sqrt05*$cyl_a, $zmin},
            /* 6*/ {$domain_length, $domain_height, $zmin},
            /* 7*/ {sqrt05*$cyl_a2, $domain_height, $zmin},
            /* 8*/ {0, $domain_height, $zmin},
            /* 9*/ {0, $cyl_a2, $zmin},
            /*10*/ {0, $cyl_a, $zmin}, //done until here
            /*11*/ {-$cyl_a*$shiftx, -$y0, $zmin},
            /*12*/ {-$cyl_a2*$shiftx, -$y0, $zmin},
            /*13*/ {-$domain_length, -$y0, $zmin},
            /*14*/ {-$domain_length, sqrt05*$cyl_a2, $zmin},
            /*15*/ {-sqrt05*$cyl_a2, sqrt05*$cyl_a2, $zmin},
            /*16*/ {-sqrt05*$cyl_a, sqrt05*$cyl_a, $zmin},
            /*17*/ {-$domain_length, $domain_height, $zmin},
            /*18*/ {-sqrt05*$cyl_a2, $domain_height, $zmin},
            /*19*/ {$domain_length, -sqrt05*$cyl_a2, $zmin},
            /*20*/ {sqrt05*$cyl_a2, -sqrt05*$cyl_a2, $zmin},
            /*21*/ {sqrt05*$cyl_a, -sqrt05*$cyl_a, $zmin},
            /*22*/ {$domain_length, -$water_depth, $zmin},
            /*23*/ {sqrt05*$cyl_a2, -$water_depth, $zmin},
            /*24*/ {0, -$water_depth, $zmin},
            /*25*/ {0, -$cyl_a2, $zmin},
            /*26*/ {0, -$cyl_a, $zmin},
            /*27*/ {-$domain_length, -sqrt05*$cyl_a2, $zmin},
            /*28*/ {-sqrt05*$cyl_a2, -sqrt05*$cyl_a2, $zmin},
            /*29*/ {-sqrt05*$cyl_a, -sqrt05*$cyl_a, $zmin},
            /*30*/ {-$domain_length, -$water_depth, $zmin},
            /*31*/ {-sqrt05*$cyl_a2, -$water_depth, $zmin}
        });

        // Duplicate z points for zmax
        const label sz = points.size();
        points.resize(2*sz);
        for (label i = 0; i < sz; ++i)
        {
            const point& pt = points[i];
            points[i + sz] = point(pt.x(), pt.y(), $zmax);
        }

        os  << points;
    #};
};

ncells_z    20;
ncells_y    10; // Number of cells in the normal direction of the cylinder
ncells_diam 80; // Number of cells along the perimeter

angle_shift #codeStream // This could be done using #calc, but just an example for how codeStream works
    { 
      code
      #{
        const scalar angle  = atan($y0/($shiftx*$cyl_a)); // Angle between the cylinder center (0,0) and the contact point with the free surface (cyl_a*shiftx,-y0)
        // Info  << angle;
        os  << angle;
      #};
     };

// Proportion of cells in eahc block, due to the cylinder being shifted downdards
cells_0     #calc "round(0.125*$ncells_diam)"; // Block 0 and 10 have 12.5% of total cells
cells_1     #calc "round($ncells_diam*(M_PI_4+$angle_shift)/(2*M_PI))"; // Block 1 is larger than block 11, so more cells
cells_11    #calc "round($ncells_diam*(M_PI_4-$angle_shift)/(2*M_PI))";
cells_10    #calc "round(0.125*$ncells_diam)"; 

// Exapnsion ratios
exp_cyl     0.4; // Cylinder, normal direction
exp_fs      0.2; // Free surface, X direction
exp_water   0.05; // Water depth, Y direction
exp_atm     5; //Atmosphere
exp_atm_inv 0.2; //Atmosphere

blocks
(   
    hex (9 10 5 4 41 42 37 36) ($ncells_y $cells_0 $ncells_z) simpleGrading ($exp_cyl 1 1)////0
    hex (4 5 0 1 36 37 32 33) ($ncells_y $cells_1 $ncells_z) simpleGrading ($exp_cyl 1 1)//1
    hex (34 33 36 35 2 1 4 3) (25 $cells_1 $ncells_z) simpleGrading ($exp_fs 1 1)//2
    hex (35 36 39 38 3 4 7 6) (25 25 $ncells_z) simpleGrading ($exp_fs $exp_atm 1)//3
    hex (9 4 7 8 41 36 39 40) ($cells_0 25 $ncells_z) simpleGrading (1 $exp_atm 1)//4
    hex (15 16 10 9 47 48 42 41) ($ncells_y $cells_0 $ncells_z) simpleGrading ($exp_cyl 1 1) //5 
    hex (12 11 16 15 44 43 48 47) ($ncells_y $cells_1 $ncells_z) simpleGrading ($exp_cyl 1 1) //6
    hex (13 12 15 14 45 44 47 46) (25 $cells_1 $ncells_z) simpleGrading ($exp_fs 1 1) //7
    hex (14 15 18 17 46 47 50 49) (25 25 $ncells_z) simpleGrading ($exp_fs $exp_atm 1) //8
    hex (15 9 8 18 47 41 40 50) ($cells_0 25 $ncells_z) simpleGrading (1 $exp_atm 1) //9

    hex (20 21 26 25 52 53 58 57) ($ncells_y $cells_10 $ncells_z) simpleGrading ($exp_cyl 1 1) //10
    hex (1 0 21 20 33 32 53 52) ($ncells_y $cells_11 $ncells_z) simpleGrading ($exp_cyl 1 1)  //11
    hex (2 1 20 19 34 33 52 51) (25 $cells_11 $ncells_z) simpleGrading ($exp_fs 1 1) //12
    hex ( 54 55 52 51 22 23 20 19) (25 25 $ncells_z) simpleGrading ($exp_fs $exp_atm_inv 1)//13
    hex (24 23 20 25 56 55 52 57) ($cells_10 25 $ncells_z) simpleGrading (1 $exp_atm_inv 1)//14
    hex (25 26 29 28 57 58 61 60) ($ncells_y $cells_10 $ncells_z) simpleGrading ($exp_cyl 1 1) //15
    hex (28 29 11 12 60 61 43 44) ($ncells_y $cells_11 $ncells_z) simpleGrading ($exp_cyl 1 1) //16
    hex (27 28 12 13 59 60 44 45) (25 $cells_11 $ncells_z) simpleGrading ($exp_fs 1 1)//17
    hex (30 31 28 27 62 63 60 59) (25 25 $ncells_z) simpleGrading ($exp_fs $exp_atm_inv 1)//18
    hex (31 24 25 28 63 56 57 60) ($cells_10 25 $ncells_z) simpleGrading (1 $exp_atm_inv 1)//19
);


edges
(
    // Inner cylinder up
    arc  0  5 origin (0 0 $zmin)
    arc  5 10 origin (0 0 $zmin)
    arc  1  4 origin (0 0 $zmin)
    arc  4  9 origin (0 0 $zmin)
    arc 32 37 origin (0 0 $zmax)
    arc 37 42 origin (0 0 $zmax)
    arc 33 36 origin (0 0 $zmax)
    arc 36 41 origin (0 0 $zmax)
    // Intermediate cylinder up
    arc 11 16 origin (0 0 $zmin)
    arc 16 10 origin (0 0 $zmin)
    arc 12 15 origin (0 0 $zmin)
    arc 15  9 origin (0 0 $zmin)
    arc 43 48 origin (0 0 $zmax)
    arc 48 42 origin (0 0 $zmax)
    arc 44 47 origin (0 0 $zmax)
    arc 47 41 origin (0 0 $zmax)
    // Inner cylinder down
    arc 0  21 origin (0 0 $zmin)
    arc 21 26 origin (0 0 $zmin)
    arc 1  20 origin (0 0 $zmin)
    arc 20 25 origin (0 0 $zmin)
    arc 32 53 origin (0 0 $zmax)
    arc 53 58 origin (0 0 $zmax)
    arc 33 52 origin (0 0 $zmax)
    arc 52 57 origin (0 0 $zmax)
    // Intermediate cylinder down
    arc 11 29 origin (0 0 $zmin)
    arc 29 26 origin (0 0 $zmin)
    arc 12 28 origin (0 0 $zmin)
    arc 28 25 origin (0 0 $zmin)
    arc 43 61 origin (0 0 $zmax)
    arc 61 58 origin (0 0 $zmax)
    arc 44 60 origin (0 0 $zmax)
    arc 60 57 origin (0 0 $zmax)
);

boundary
(
   
    outlet
    {
        type patch;
        faces
        (
            (2 3 35 34)
            (3 6 38 35)
            (19 2 34 51)
            (22 19 51 54)

        );
    }
    top
    {
        type wall;
        faces
        (
            (7 8 40 39)
            (6 7 39 38)
            (8 18 50 40)
            (18 17 49 50)
        );
    }
    bottom
    {
        type wall;
        faces
        (
            (23 24 56 55)
            (22 23 55 54)
            (24 31 63 56)
            (31 30 63 62)
        );
    }
    inlet
    {
        type patch;
        faces
        (
            (14 13 45 46)
            (17 14 46 49)
            (13 27 59 45)
            (30 27 62 59)
        );
    }
    cylinder
    {
        type wall;
        faces
        (
            (10 5 37 42)
            (5 0 32 37)
            (16 10 42 48)
            (11 16 48 43)
            (21 26 53 58)
            (0 21 32 53)
            (26 29 61 58)
            (29 11 43 61)
        );
    }

    back
    {
        type wall;
        faces
        (
            (10 9 4 5)
            (5 4 1 0)
            (1 4 3 2)
            (7 6 4 3)
            (8 7 4 9)
            (9 10 16 15)
            (11 12 15 16)
            (13 14 15 12)
            (14 17 18 15)
            (18 8 9 15)
            (26 21 20 25)
            (21 0 1 20)
            (1 2 19 20)
            (20 19 22 23)
            (24 25 20 23)
            (29 26 25 28)
            (28 12 11 29)
            (13 12 27 28)
            (30 27 28 31)
            (28 25 31 24)
        );
    }

    front
    {
        type wall;
        faces
        (
            (42 41 36 37)
            (37 36 33 32)
            (33 36 35 34)
            (39 38 36 35)
            (40 39 36 41)
            (41 42 48 47)
            (43 44 47 48)
            (45 46 47 44)
            (46 49 50 47)
            (50 40 41 47)
            (58 53 52 57)
            (53 32 33 52)
            (33 34 51 52)
            (52 51 54 55)
            (56 57 52 55)
            (61 58 57 60)
            (60 44 43 61)
            (45 44 59 60)
            (62 59 60 63)
            (60 57 63 56)
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
